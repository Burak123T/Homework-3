// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: chitchat/chitchat.proto

package chitchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

<<<<<<< HEAD
const (
	ChatService_Join_FullMethodName              = "/chitchat.ChatService/Join"
	ChatService_Leave_FullMethodName             = "/chitchat.ChatService/Leave"
	ChatService_SendMessage_FullMethodName       = "/chitchat.ChatService/SendMessage"
	ChatService_BroadcastListener_FullMethodName = "/chitchat.ChatService/BroadcastListener"
)

=======
>>>>>>> 311c95f33f7901c322928da6658f1f619813602a
// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Join(ctx context.Context, in *User, opts ...grpc.CallOption) (ChatService_JoinClient, error)
	Leave(ctx context.Context, in *User, opts ...grpc.CallOption) (*SentChatResponse, error)
	SendMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*SentChatResponse, error)
	BroadcastListener(ctx context.Context, in *User, opts ...grpc.CallOption) (*ClientMessage, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Join(ctx context.Context, in *User, opts ...grpc.CallOption) (ChatService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chitchat.ChatService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_JoinClient interface {
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type chatServiceJoinClient struct {
	grpc.ClientStream
}

func (x *chatServiceJoinClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) Leave(ctx context.Context, in *User, opts ...grpc.CallOption) (*SentChatResponse, error) {
	out := new(SentChatResponse)
	err := c.cc.Invoke(ctx, "/chitchat.ChatService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*SentChatResponse, error) {
	out := new(SentChatResponse)
	err := c.cc.Invoke(ctx, "/chitchat.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) BroadcastListener(ctx context.Context, in *User, opts ...grpc.CallOption) (*ClientMessage, error) {
	out := new(ClientMessage)
	err := c.cc.Invoke(ctx, "/chitchat.ChatService/BroadcastListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) BroadcastListener(ctx context.Context, in *User, opts ...grpc.CallOption) (*ClientMessage, error) {
	out := new(ClientMessage)
	err := c.cc.Invoke(ctx, ChatService_BroadcastListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Join(*User, ChatService_JoinServer) error
	Leave(context.Context, *User) (*SentChatResponse, error)
	SendMessage(context.Context, *ClientMessage) (*SentChatResponse, error)
	BroadcastListener(context.Context, *User) (*ClientMessage, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Join(*User, ChatService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChatServiceServer) Leave(context.Context, *User) (*SentChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChatServiceServer) SendMessage(context.Context, *ClientMessage) (*SentChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) BroadcastListener(context.Context, *User) (*ClientMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastListener not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Join(m, &chatServiceJoinServer{stream})
}

type ChatService_JoinServer interface {
	Send(*ServerMessage) error
	grpc.ServerStream
}

type chatServiceJoinServer struct {
	grpc.ServerStream
}

func (x *chatServiceJoinServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chitchat.ChatService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Leave(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chitchat.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_BroadcastListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).BroadcastListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
<<<<<<< HEAD
		FullMethod: ChatService_BroadcastListener_FullMethodName,
=======
		FullMethod: "/chitchat.ChatService/BroadcastListener",
>>>>>>> 311c95f33f7901c322928da6658f1f619813602a
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).BroadcastListener(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chitchat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Leave",
			Handler:    _ChatService_Leave_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "BroadcastListener",
			Handler:    _ChatService_BroadcastListener_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _ChatService_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chitchat/chitchat.proto",
}

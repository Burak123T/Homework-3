// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: participant.proto

package participant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Participant_Create_FullMethodName = "/Participant/Create"
)

// ParticipantClient is the client API for Participant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipantClient interface {
	Create(ctx context.Context, in *SendChatReq, opts ...grpc.CallOption) (*SendChatResp, error)
}

type participantClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipantClient(cc grpc.ClientConnInterface) ParticipantClient {
	return &participantClient{cc}
}

func (c *participantClient) Create(ctx context.Context, in *SendChatReq, opts ...grpc.CallOption) (*SendChatResp, error) {
	out := new(SendChatResp)
	err := c.cc.Invoke(ctx, Participant_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipantServer is the server API for Participant service.
// All implementations must embed UnimplementedParticipantServer
// for forward compatibility
type ParticipantServer interface {
	Create(context.Context, *SendChatReq) (*SendChatResp, error)
	mustEmbedUnimplementedParticipantServer()
}

// UnimplementedParticipantServer must be embedded to have forward compatible implementations.
type UnimplementedParticipantServer struct {
}

func (UnimplementedParticipantServer) Create(context.Context, *SendChatReq) (*SendChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedParticipantServer) mustEmbedUnimplementedParticipantServer() {}

// UnsafeParticipantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipantServer will
// result in compilation errors.
type UnsafeParticipantServer interface {
	mustEmbedUnimplementedParticipantServer()
}

func RegisterParticipantServer(s grpc.ServiceRegistrar, srv ParticipantServer) {
	s.RegisterService(&Participant_ServiceDesc, srv)
}

func _Participant_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participant_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServer).Create(ctx, req.(*SendChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Participant_ServiceDesc is the grpc.ServiceDesc for Participant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Participant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Participant",
	HandlerType: (*ParticipantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Participant_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "participant.proto",
}
